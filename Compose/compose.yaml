services:
  # FrontEnd + Load Balancer
  nginx:
    container_name: nginx
    restart: unless-stopped
    image: nginx:alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./build:/var/www/frontend
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend1
      - backend2
    networks:
      - elderly_network
  
  # Backend
  backend1:
    image: danilopedrazzi/elderly-api:latest
    container_name: backend1
    environment:
      DB_URL: ${BACKEND_DB_URL}
      DB_USER: ${BACKEND_DB_USER}
      DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_AUTH: ${MAIL_AUTH}
      MAIL_STARTTLS: ${MAIL_STARTTLS}
    expose:
      - "8080"
    depends_on:
      - database
    networks:
      - elderly_network
    restart: unless-stopped
  backend2:
    image: danilopedrazzi/elderly-api:latest
    container_name: backend2
    environment:
      DB_URL: ${BACKEND_DB_URL}
      DB_USER: ${BACKEND_DB_USER}
      DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_AUTH: ${MAIL_AUTH}
      MAIL_STARTTLS: ${MAIL_STARTTLS}
    expose:
      - "8080"
    depends_on:
      - database
    networks:
      - elderly_network
    restart: unless-stopped

  # Database
  database:
    image: danilopedrazzi/elderly-database:latest
    container_name: database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - elderly_network
    restart: unless-stopped

  #CI/CD
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=180
      - WATCHTOWER_INCLUDE_STOPPED=false

volumes:
  postgres_data:
    external: true 

networks:
  elderly_network:
    driver: bridge